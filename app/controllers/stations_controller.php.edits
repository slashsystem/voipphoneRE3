<?php


#-----------------------------------------------------------------#
# $Rev:: 40            $:  Revision of last commit                #
#-----------------------------------------------------------------#

/* Controller for  station
 *	Develeoper	:	Mano
 *	Date		:	05 JULY 2010
 */
class StationsController extends AppController {

	/**
	 * name property
	 * @var string 'Stations'
	 * @access public
	 */
	var $name = 'Stations';
	var $uses = array (
		'Station',
		'CStation',
		'Stationkey',
		'Feature',
		'Location',
		'Log',
		'Userlog',
		'Customer',
		'Dns'
	);

	// load any helpers used in the views
	var $helpers = array (
		'Html',
		'Form',
		'Javascript',
		'Paginator'
	);
	var $paginate = array (
		'Paginate' => 15,
		'page' => 1
	);
	var $components = array (
		'Authentication',
		'TransferMoh',
		'Pagination',
		'RequestHandler'
	);

	function beforeFilter() {

		parent :: beforeFilter();

		if (!$this->Session->read('SELECTED_CUSTOMER')) {
			$this->layout = 'ajax';
			$this->log("Station controller : No Selected Customer : using AJAX", LOG_DEBUG);
			$this->cakeError('sessionExpired');
		}
		if ($this->Session->read('APPNAME') != 'Phone') {
			$this->log('Gate USER TRIED TO ACCESS Phone PAGE APP => ' . $this->Session->read('APPNAME'), LOG_DEBUG);
			//$this->layout='ajax';
			//$this->cakeError('accessDenied'); 
			#$this->redirect('/customers');
			exit ();

		}

	}

	/**
	 * default action
	 *
	 */
	function index($number = null, $reset = null) { //print_r($_POST);die();
		$this->pageTitle = 'Station List';

		if (!$number) {
			$this->log("Station controller : Customer ID => $number  : Therefore redirecting to customer", LOG_DEBUG);
			$this->redirect('/customers');
			exit ();
		}
		if (!$reset) {
			$this->log("Station controller : Come from pther page Customer ID => $number sessionvar : $sel_customer", LOG_DEBUG);
		}
		else
		{
			$this->log("Station controller : Reset : $reset on page Customer ID => $number sessionvar : $sel_customer", LOG_DEBUG);
		}

		/**********for case of internal/external users********/
		if ($this->Session->read('SELECTED_CUSTOMER') != Configure :: read('access_id')) {

			#If The user is an external..

			$id = $this->Session->read('SELECTED_CUSTOMER');
			$cnt = count($this->_Filter);

			if (!$this->Customer->validCustomer($id, $number)) {
				#print_r("not valid");die();
				$this->redirect('/customers');
				exit ();
			}
			#print_r("valid checking $id $number");die();

		}
		/**********************END*************************/

		/**these for getting the current customer name*/

		$this->set('SELECTED_CUSTOMER_NAME', $number);

		#User for left hand Menu navigation.
		$this->Session->write('SELECTED_CNN', $number);
		$this->set('SELECTED_CNN', $number);
		/**end for getting the current customer name*/

		$this->paginate['Paginate'] = $this->AutoPaginate->setPaginate();
		$cnt = count($this->_Filter);

		// save the formats in a variable for the view
		$this->_Filter[$cnt] = "Station.customer_id = '$number'";
		$sel_location = 0;
		$sel_customer = $this->Session->read('sel_customer');
		#if (isset($sel_customer) && $sel_customer)
		#{
			
		#}
		#else
		#{
			#$sel_customer =  $this->Session->read('SELECTED_CUSTOMER');
		#}

		if ($number != $sel_customer) {
			$this->Session->write('sel_customer', $number);
			$this->log("Station controller : number != sel_Customer, $number  <> $sel_customer", LOG_DEBUG);
		} 
		else 
		{
			
			$this->log("Station controller : HERE", LOG_DEBUG);
			$passed_sel_location=isset($this->params['url']['location'])?$this->params['url']['location']:(isset($this->params['named']['location'])?$this->params['named']['location']:"");
	
			if (isset ($passed_sel_location) && $passed_sel_location) {

				$sel_location = $passed_sel_location;
				$this->Session->write('sel_location', $sel_location);
				
				$this->log("Station controller : HERE2", LOG_DEBUG);

			}
			elseif (isset ($passed_sel_location) && $passed_sel_location == 0) {
				$this->Session->write('sel_location', '');
				$sel_location = '';
				
				$this->log("Station controller : HERE3", LOG_DEBUG);
			}
			elseif ($this->Session->read('sel_location') && !$reset) {
				$sel_location = $this->Session->read('sel_location');
				
				$this->log("Station controller : HERE4", LOG_DEBUG);
			}
			$this->log("Station controller : location = $sel_location", LOG_DEBUG);
			$this->passedArgs['location'] = $sel_location;
		}

		/* If Location value is selected */
		if ($sel_location) {

			$count_val = $this->Station->station_count($number, $sel_location);
			$count = $count_val[0][0]['count'];

			$this->paginate = array (
				'joins' => array (
					array (
						'table' => 'stationkeys',
						'alias' => 'Stationkey',
						'type' => 'LEFT',
						'foreignKey' => false,
						'conditions' => array (
							'Station.id = Stationkey.Station_id'
						)
					),
					array (
						'table' => 'features',
						'alias' => 'Feature',
						'type' => 'LEFT',
						'foreignKey' => false,
						'conditions' => array (
							'Feature.stationkey_id = Stationkey.id'
						)
					)
				),

				'limit' => $this->paginate['limit'],
				'fields' => array (
					'Feature.primary_value',
					'Station.4voip_id',
					'Station.id',
					'Station.customer_id',
					'Station.port',
					'Station.type',
					'Station.password',
					'Station.CWT',
					'Station.CFRA',
					'Station.SIMRING',
					'Station.COMBOX',
					'Station.MOH',
					'Station.extensions',
					'Station.slug',
					'Station.desc',
					'Station.created',
					'Station.modified',
					'Station.status',
					'Customer.id',
					'Customer.name',
					'Customer.bsk',
					'Customer.created',
					'Customer.modified',
					'Customer.status',
					'Customer.type',
					'Customer.moh_id'
				)
			);

			$cnt = count($this->_Filter);
			$this->_Filter[$cnt] = "Feature.short_name= 'DISPLAYNAME' and	Stationkey.keynumber = 1";
			#$this->_Filter[$cnt] = "Stationkey.keynumber = 1 group by Stationkey.station_id";
			$cnt = count($this->_Filter);
			if ($sel_location == 'NULL')
				$this->_Filter[$cnt] = "Stationkey.location_id is NULL  group by Stationkey.station_id";
			else {
				$this->_Filter[$cnt] = "Stationkey.location_id = '$sel_location'";
				#$this->passedArgs['location_id'] = $sel_location;

			}

			//$this->_Filter[$cnt] = "Stationkey.location_id = '$sel_location'  group by Stationkey.station_id";

			$id=isset($this->params['url']['sid'])?$this->params['url']['sid']:(isset($this->params['named']['sid'])?$this->params['named']['sid']:"");
			if($id!=''){
				$this->_Filter = array_merge($this->_Filter,array('Station.id LIKE'=>'%'.$id.'%'));
				$this->passedArgs['sid'] = $id;
			}
			$type=isset($this->params['url']['type'])?$this->params['url']['type']:(isset($this->params['named']['type'])?$this->params['named']['type']:"");
			if($type!=''){
				$this->_Filter = array_merge($this->_Filter,array('Station.type'=>$type));
				$this->passedArgs['type'] = $type;
			}
			$port=isset($this->params['url']['port'])?$this->params['url']['port']:(isset($this->params['named']['port'])?$this->params['named']['port']:"");
			if($port!=''){
				$this->_Filter = array_merge($this->_Filter,array('Station.port LIKE'=>'%'.$port.'%'));
				$this->passedArgs['port'] = $port;
			}
			
			
			#Workaround to handle the location id being sent as a parameter.
			
			unset($this->_Filter['Station.location']);
			unset($this->_Filter['Station.sid']);
			
			#-------------------------------------------------------------
			
			$station_details = $this->paginate('Station', $this->_Filter);
			//$this->params['paging']['Station']['count']	=	$count;
			
			$cond = $this->_Filter;
			$this->Session->write('cond', serialize($cond));
			$condition_array=print_r($cond, true);
			$this->log("1Station controller : Setting sesion conditions : $condition_array", LOG_DEBUG);

		} else {

			/* added code start */
			$this->paginate = array (
				'joins' => array (
					array (
						'table' => 'stationkeys',
						'alias' => 'Stationkey',
						'type' => 'LEFT',
						'foreignKey' => false,
						'conditions' => array (
							'Station.id = Stationkey.Station_id'
						)
					),
					array (
						'table' => 'features',
						'alias' => 'Feature',
						'type' => 'LEFT',
						'foreignKey' => false,
						'conditions' => array (
							'Feature.stationkey_id = Stationkey.id'
						)
					)
				),

				'limit' => $this->paginate['limit'],
				'fields' => array (
					'Feature.primary_value',
					'Station.4voip_id',
					'Station.id',
					'Station.customer_id',
					'Station.port',
					'Station.type',
					'Station.password',
					'Station.CWT',
					'Station.CFRA',
					'Station.SIMRING',
					'Station.COMBOX',
					'Station.MOH',
					'Station.extensions',
					'Station.slug',
					'Station.desc',
					'Station.created',
					'Station.modified',
					'Station.status',
					'Customer.id',
					'Customer.name',
					'Customer.bsk',
					'Customer.created',
					'Customer.modified',
					'Customer.status',
					'Customer.type',
					'Customer.moh_id'
				)
			);
			
			
			
			
			$cnt = count($this->_Filter);
			$mycond = $this->_Filter;
			$this->_Filter[$cnt] = "Feature.short_name= 'DISPLAYNAME' and	Stationkey.keynumber = 1";
			#$this->_Filter[$cnt] = "(Feature.short_name= 'DISPLAYNAME' OR Feature.short_name= 'DN') and Stationkey.keynumber = 1";

			$id=isset($this->params['url']['sid'])?$this->params['url']['sid']:(isset($this->params['named']['sid'])?$this->params['named']['sid']:"");
			if($id!=''){
				$this->_Filter = array_merge($this->_Filter,array('Station.id LIKE'=>'%'.$id.'%'));
				$this->passedArgs['sid'] = $id;
			}
			$type=isset($this->params['url']['type'])?$this->params['url']['type']:(isset($this->params['named']['type'])?$this->params['named']['type']:"");
			if($type!=''){
				$this->_Filter = array_merge($this->_Filter,array('Station.type'=>$type));
				$this->passedArgs['type'] = $type;
			}
			$port=isset($this->params['url']['port'])?$this->params['url']['port']:(isset($this->params['named']['port'])?$this->params['named']['port']:"");
			if($port!=''){
				$this->_Filter = array_merge($this->_Filter,array('Station.port LIKE'=>'%'.$port.'%'));
				$this->passedArgs['port'] = $port;
			}
			
			#Workaround to handle the location id being sent as a parameter.
			
			#unset($this->_Filter['Station.location']);
			unset($this->_Filter['Station.sid']);
			
			#-------------------------------------------------------------

			/* added code ends */

			$station_details = $this->paginate('Station', $this->_Filter);
			
			$cond = $this->_Filter;
			$this->Session->write('cond', serialize($cond));
			$condition_array=print_r($cond, true);
			$this->log("2Station controller : Setting sesion conditions : $condition_array", LOG_DEBUG);

		}
		$cond = $this->_Filter;

		$this->log('Index page ' . $number . 'request returned station count ' . sizeof($station_details), LOG_DEBUG);

		$this->set('stations', $station_details);
		$this->set('cust_id', $number);

		$this->set('locations_ids', $this->Location->find('all', array (
			'fields' => array (
				'Location.name',
				'Location.zip',
				'Location.id',
				'Location.address'
			),
			'conditions' => array (
				'Location.customer_id =' => $number
			),
			'order' => array (
				'Location.zip' => 'asc'
			)
		)));

		/**these for getting the current customer name*/
		if (isset ($location[0]['Customer']['name']))
			$this->set('SELECTED_CUSTOMER_NAME', $location[0]['Customer']['name']);
		/**end for getting the current customer name*/

		$this->set('title_header', __('Swisscom Extranet Corporate Business - Voiphone Selfcare', true));
		$this->set('curr_loc', $sel_location);

		/*CBM Added*/
		$customerInfo = $this->Customer->findById($number);
		if (isset ($customerInfo['Customer']['name'])) {
			$this->set('selected_customer', $customerInfo['Customer']['name']);
		} else {
			$this->set('selected_customer', 'UNDEF');

		}

	}
	
	/**
	 * function for getting the station major features
	 *
	 */
	function resetFeature($station_id = null) {
		
		if($station_id != ''){
	
			//First Create an as-is version.
	
			$resetAsis = $this->Station->resetStation($station_id);
			$resetAsis = $this->Station->resetStationKeys($station_id);
			$resetAsis = $this->Station->deleteFeatures($station_id);
			$resetAsis = $this->Station->deleteAsisFeatures($station_id);
			$resetAsis = $this->Station->deleteAsisStation($station_id);
			$resetAsis = $this->Station->deleteAsisStationkeys($station_id);
			$resetAsis = $this->Station->resetFeatures($station_id);
			$this->log('resetFunction : reset sfeatures ' . $resetAsis, LOG_DEBUG);
		}
		else
		{
			$this->log('resetFeature function ' . 'No ID ' . $stationId, LOG_DEBUG);
		}
		
		$this->redirect('/stations/edit/' . $station_id);

	}
	
	
	/**
	 * function for getting the station major features
	 *
	 */
	function editFeature($station_id = null) {
		
		//First Create an as-is version.
		#if(1)
		#{
		#	$createAsis = $this->Station->createAsisStation($station_id);
		#	$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
		#	$createAsis = $this->Station->createAsisStationKeys($station_id);
		#	$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
		#	$createAsis = $this->Station->deleteAsisFeatures($station_id);
		#	$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
		#	$createAsis = $this->Station->createAsisFeatures($station_id);
		#	$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
		#}
        if($this->RequestHandler->isAjax()==true)
		{ 
				echo "<pre/>"; $result = $_REQUEST["table-3"]; print_r($this->params);  die;
		}
		$this->Session->write('sel_customer', '');
		$this->pageTitle = 'Station Details';

		if (!$station_id) {
			$this->redirect('/customers');
			exit ();
		}

		#Accept DN passed as argument will lookup station and redirect to correct station.
		preg_match("/^DN-([0-9]+)/", $station_id, $matches);
		if ($matches[0]) {
			$DN_ID = $matches[1];
			print "looking for station with DN -> $matches[1]";
			$record = $this->Stationkey->find('all', array (
				'conditions' => array (
					'Stationkey.dn' => $DN_ID
				)
			));

			if (empty ($record)) {

				print "NO STATIONKEY FOUND $record[0]['Stationkey]['station_id']";
				#exit ();

				$this->cakeError('accessDenied');
			}
			else
			{
				#if more than one record the treat as group

				if (count($record) > 1) {

					$pilotStation = $this->Station->getPilotFromDn($DN_ID);
					#print_r($pilotStation);
					#exit ();
					$this->redirect('/stations/edit/' . $pilotStation[0]['stationkeys']['station_id']);

				} else {

					#print "FOUND $record[0]['Stationkey]['station_id']";

					$this->redirect('/stations/edit/' . $record[0]['Stationkey']['station_id']);
					#exit ();

				}
				#exit();
			}
		}


		$stationFeatures = $this->Feature->find('all', array (
			'conditions' => array (
				'Feature.short_name' =>array('DN','MADN'), 
				'Feature.id like' => '%' . $station_id . '%'
			)
		));
		$results_array=print_r($stationFeatures, true);
		$this->log("Station controller : feature results : $results_array", LOG_DEBUG);
		$this->set('stationFeatures', $stationFeatures);
		$this->set('statId', $station_id);


	}

	/**
	 * function for getting the list
	 *
	 */
	function edit($station_id = null) {

		$this->Session->write('sel_customer', '');
		
		$toBe = $this->CStation->find('all', array (
				'conditions' => array (
						'id' => $station_id
				)
		));
		
		if (empty ($toBe)) {
		$this->pageTitle = 'Station Details';
		}
		else 
		{
			$this->pageTitle = 'Station Details (TO BE)';
		}

		if (!$station_id) {
			$this->redirect('/customers');
			exit ();
		}

		#Accept DN passed as argument will lookup station and redirect to correct station.
		preg_match("/^DN-([0-9]+)/", $station_id, $matches);
		if ($matches[0]) {
			$DN_ID = $matches[1];
			print "looking for station with DN -> $matches[1]";
			$record = $this->Stationkey->find('all', array (
				'conditions' => array (
					'Stationkey.dn' => $DN_ID
				)
			));

			if (empty ($record)) {

				print "NO STATIONKEY FOUND $record[0]['Stationkey]['station_id']";
				#exit ();

				$this->cakeError('accessDenied');
			} else {
				#if more than one record the treat as group

				if (count($record) > 1) {

					$pilotStation = $this->Station->getPilotFromDn($DN_ID);
					#print_r($pilotStation);
					#exit ();
					$this->redirect('/stations/edit/' . $pilotStation[0]['stationkeys']['station_id']);

				} else {

					#print "FOUND $record[0]['Stationkey]['station_id']";

					$this->redirect('/stations/edit/' . $record[0]['Stationkey']['station_id']);
					#exit ();

				}
				#exit();
			}
		}

		#Accept KEY Id of format KEY@STATION passed as argument will lookup station and redirect to correct station.
		preg_match("/[0-9]+@([0-9]+)/", $station_id, $matches);
		if ($matches[0]) {
			#$this->redirect('/stations/edit/'.$matches[1]);
			print "STATION KEY DETECTED";
			exit ();
		}

		$location = $this->Station->find('all', array (
			'conditions' => array (
				"Station.status" => Configure :: read('status'),
				'Station.id' => $station_id
			)
		));

		/**these for getting the current customer name*/
		if (isset ($location[0]['Customer']['name']))
			$this->set('SELECTED_CUSTOMER_NAME', $location[0]['Customer']['name']);
		$customer_id = $location[0]['Customer']['id'];
		$this->set('SELECTED_CNN', $location[0]['Customer']['id']);
		/**end for getting the current customer name*/

		// for checking the correct user access
		if ($this->Session->read('SELECTED_CUSTOMER') != Configure :: read('access_id')) {
			$id = $this->Session->read('SELECTED_CUSTOMER');
			if ($location[0]['Customer']['bsk'] != $id) {
				$this->layout = 'ajax';
				$this->cakeError('accessDenied');
			}
		}

		/**************** for single user accesss**********************/
		$this->_singleUserAccess($station_id);
		/**************** end of single user accesss**********************/

		$this->Stationkey->bindModel(array (
			'hasMany' => array (
				'Feature' => array (
					'conditions' => array (
						'Feature.stationkey_id' => 'Stationkey.id',
						'Feature.status' => Configure :: read('status')
					),
					'order' => array (
						'Feature.stationkey_id',
						'Feature.ord'
					)
				)
			)
		));

		$stationinfo = $this->Stationkey->find('all', array (
			'conditions' => array (
				"Stationkey.status" => Configure :: read('status'),
				'Stationkey.station_id' => $station_id
			),
			'order' => 'Stationkey.keynumber'
		));

		#print_r($stationinfo);
		#die();

		//echo "<pre>";print_r($stationinfo);	die();								
		/*-------------------for checking that the stationkeyidfor blf observer is exist------------------------*/
		$prim_val = '';
		$st_val = '';
		$blf_val = array ();
		$blf_exist = array ();
		$statID = array ();
		#$grp_exist		=array();
		$grp_members = array ();
		foreach ($stationinfo as $val) {

			foreach ($val['Feature'] as $feat_val) {

				if ($feat_val['primary_value'] && ($feat_val['short_name'] == 'DN' || $feat_val['short_name'] == 'BLF')) {
					#$prim_val contains all of the DN's that are assigned to keys that have either DN or BLF features.
					$prim_val .= $feat_val['primary_value'] . ',';

				}
				#Set the group member for DN keys.
				if ($feat_val['primary_value'] && $feat_val['short_name'] == 'DN') {
					$grpStationKeyId = $val['Stationkey']['id'];
					#Contains all of the keys that point to DN
					$grp_members[$grpStationKeyId] = $this->Station->getGroupMembersFromDn($feat_val['primary_value']);
					#Contains only the pilot keys that point to DN
					$grp_pilots[$grpStationKeyId] = $this->Station->getPilotFromDn($feat_val['primary_value']);

					#$grp_members[$grpStationKeyId]	=	'TEST';

				}
			}

		}

		if (!empty ($prim_val)) {
			#blf_val contains the stationkeys that actually have BLF enabled.		
			$blf_val = $this->Feature->checkStationkeyId(trim($prim_val, ','));

			if (!empty ($blf_val)) {
				foreach ($blf_val as $blf) {
					$blf_exist[] = $blf['Feature']['primary_value'];
					$st_val .= $blf['Feature']['primary_value'] . ',';
				}

				$statid_val = $this->Feature->stationIdList(trim($st_val, ',')); //echo "<pre>";print_r($statid_val);die();
				foreach ($blf_exist as $val) {
					$statID[$val] = '';
					foreach ($statid_val as $val1) {

						if ($val == $val1['Feature']['primary_value']) {
							$statID[$val] .= $val1['Stationkey']['id'] . ' , ';
						}

					}
				}

			}

		}

		//print_r($statID);	

		/*-------------------end for checking that the blf is exist and this $blf_exist is checked as inarray in the view page------------------------*/

		//echo "<pre>";print_r($stationinfo);die();						

		$this->set('stationinfo', $stationinfo);
		$this->set('blf_exist', $blf_exist);
		$this->set('grp_members', $grp_members);
		$this->set('grp_pilots', $grp_pilots);
		$this->set('statID', $statID);
		if (isset ($location[0]))
			$this->set('location', $location[0]);
		else
			$this->set('location', array ());

		if (isset ($_SESSION['success']))
			$this->set('success', $_SESSION['success']);
		$_SESSION['success'] = '';

		if (isset ($_SESSION['error']))
			$this->set('error', $_SESSION['error']);
		$_SESSION['error'] = '';

		$this->set('title_header', __('Swisscom Extranet Corporate Business - Voiphone Selfcare', true));

		/*CBM Added*/

		$customerInfo = $this->Customer->findById($stationinfo[0]['Station']['customer_id']);
		if (isset ($customerInfo['Customer']['name'])) {
			$this->set('selected_customer', $customerInfo['Customer']['name']);
		} else {
			$this->set('selected_customer', 'UNDEF');
		}

	}
	/**
	 * function for saving the station details
	 *
	 */
	function update($station_id = null) {

		$this->blfPrimKey = array ();
		$this->station_id = $station_id;
		$this->Stationkey->bindModel(array (
			'hasMany' => array (
				'Feature' => array (
					'conditions' => array (
						'Feature.stationkey_id' => 'Stationkey.id'
					)
				)
			)
		));

		$stationinfo = $this->Stationkey->find('all', array (
			'conditions' => array (
				"Stationkey.status" => Configure :: read('status'),
				'Stationkey.station_id' => $station_id
			)
		));
		$this->dbsave = 1;

		$this->customerID = $stationinfo[0]['Station']['customer_id'];

		/**********for case of internal/external users********/
		if ($this->Session->read('SELECTED_CUSTOMER') != Configure :: read('access_id')) {

			$id = $this->Session->read('SELECTED_CUSTOMER');

			if (!$this->Customer->validCustomer($id, $this->customerID)) {
				$this->redirect('/customers');
				exit ();
			}

		}
		/**********************END*************************/

		/**************activity log*****************/

		#$log_string	= date('Y-m-d H:i:s') .' Activity :'.$this->customerID.' | '.$station_id.' | '.$this->Session->read('USERNAME').' | configuration change in  station ||'	;
		$log_string = $this->customerID . ' | ' . $station_id . ' | ' . $this->Session->read('USERNAME') . ' | configuration change in  station ||';

		$this->log($log_string, 'activity');
		//$this->log('configuration change in  station '. $station_id.' by the user '.$this->Session->read('USERNAME').' whose id is '.$this->Session->read('SELECTED_CUSTOMER'), 'activity');	
		/**************activity log*****************/

		$this->_changed_values();

		if (isset ($_POST['data_sel']))
			$dat_sel = $_POST['data_sel'];
		else
			$dat_sel = array ();
		if (isset ($_POST['data_txt']))
			$dat_txt = $_POST['data_txt'];
		else
			$dat_txt = array ();

		if (isset ($_POST['data_new']))
			$dat_val = $_POST['data_new'];
		else
			$dat_val = array ();

		if (isset ($_POST['data_label'])) //getting the value of label 
			$dat_label = $_POST['data_label'];
		else
			$dat_label = array ();

		if (isset ($_POST['dataLabel'])) //getting the value of label 
			$datalabel = $_POST['dataLabel'];
		else
			$datalabel = array ();

		$_SESSION['success'] = __('Saved Successfully', true);
		$this->redirect('/stations/edit/' . $station_id);
	}
	/**
	 * function for getting the changed values of station and show it in model box for confirmation
	 *
	 */
	function confirm_change() {
		$this->layout = 'ajax';
		$this->dbsave = 0;
		$this->station_id = $this->params['form']['stationname'];
		$this->validateErrors = array ();
		$this->blfPrimKey = array ();
		$this->blfDetail = array ();
		$this->confirm_change = 1;

		/**************** for single user accesss**********************/

		$val = $this->_singleUserAccess($this->station_id);

		/**************** end of single user accesss**********************/

		if (!$val) {
			$this->_changed_values(); // for showing the changed values 
			$this->action = 'confirm_change';
			if (!empty ($this->validateErrors)) {
				$this->set('blfValidate', $this->validateErrors);
			}
			elseif ($this->upadte_occur) $this->set('display', $this->update);
		} else {
			$this->set('userAcessDetail', $this->userAccess);
			$this->set('singleAcess', 1);
		}
	}
	/**
	 * function for showing the changed values and also for keeping in the log after confirmation
	 *
	 */

	function _changed_values() {
		/*************declaration******************/
		$this->upadte_occur = 0;
		$this->update = array ();
		$log_entry = '';
		$this->success = 1;
		$dat_sel = array ();
		$dat_txt = array ();
		$dat_label = array ();
		$dat_val = array ();
		/******************end*********************/

		/**************** for single user accesss**********************/
		$this->_singleUserAccess($this->station_id);
		/*************************** end ******************************/

		/****************the below code which is for getting the stationkey details for checking any modification done in the form******************/
		$this->Stationkey->bindModel(array (
			'hasMany' => array (
				'Feature' => array (
					'conditions' => array (
						'Feature.stationkey_id' => 'Stationkey.id',
						'Feature.status' => Configure :: read('status')
					)
				)
			)
		));

		$stationinfo = $this->Stationkey->find('all', array (
			'conditions' => array (
				"Stationkey.status" => Configure :: read('status'),
				'Stationkey.station_id' => $_POST['stationname']
			)
		));
		$i = 1; //echo "<pre>";print_r($stationinfo);die();
		$this->customerID = $stationinfo[0]['Station']['customer_id'];
		foreach ($stationinfo as $val_filter) {
			foreach ($val_filter['Feature'] as $getfeature) {
				$filter[$i]['Feature'] = $getfeature;
				$i++;
			}
		}
		$feat = $filter;
		$fet = array ();
		foreach ($this->data as $i => $val) {
			foreach ($feat as $j => $val1) {
				if ($val1['Feature']['id'] == $i) {
					$fet[$i]['id'] = $val1['Feature']['id'];
					$fet[$i]['short_name'] = $val1['Feature']['short_name'];
					if ($val1['Feature']['short_name'] == 'LANG')
						$fet[$i]['values'] = strtoupper(trim($val1['Feature']['primary_value']));
					else
						$fet[$i]['values'] = trim($val1['Feature']['primary_value']);
					$fet[$i]['stationkey_id'] = $val1['Feature']['stationkey_id'];
					$fet[$i]['secondary'] = trim($val1['Feature']['label']);
				}
			}
		}
		$this->oldervalue = $fet;
		/*******************************************end**********************************************************************/
		/************************************** getting the value from the form**********************************************/
		if (isset ($_POST['data_sel']))
			$dat_sel = $_POST['data_sel']; //getting the value of feature select if it has station key and feature short_name

		if (isset ($_POST['data_txt']))
			$dat_txt = $_POST['data_txt']; //getting the value of primary value (past it has no primary value)

		if (isset ($_POST['data_new']))
			$dat_val = $_POST['data_new']; //getting the value of feature value (past it has no short_name ie no BLF/AUD)

		if (isset ($_POST['data_label'])) //getting the value of label 
			$dat_label = $_POST['data_label'];

		/***********************************************end*************************************************************************/
		/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
			implementation is for getting the value of newly changed ie from empty..
			
			USED IN THE XML REQUEST
			
			<object action="$this->action" name="$this->short_name">
		     <message station="$_POST['stationport']" key="key12">
		            <var value="LACURd" name="attribute1"/>
		            <var value="3225921" name="station_id"/>
		     </message>
			</object >
			
			$this->short_name 					is the value  for tag "name"
			$this->action     					is the value for  tag  "action"
			$this->key       					 is the value for  tag  "key"
			$this->newvalue['attribute1']   &&   $this->newvalue['station_id'] && $this->newvalue['cnn_id']  for var messages in the xml
			
		@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
		$j = 1;
		foreach ($dat_txt as $k => $txt) {
			/*************for checking the new feature  modified from empty short_name   to a non empty short_name(AUD/BLF)*************/
			if (isset ($dat_txt[$k][$j]) && isset ($dat_val[$k][$j]) && $dat_val[$k][$j]) {
				$this->upadte_occur = 1;
				$this->newvalue = array ();
				/**********************function for xml request based on the change*********************/
				$this->station_id = $_POST['stationname'];
				$this->key = $k;
				$this->action = 'add';

				if ($dat_val[$k][$j] == 'AUD') { //if the the short_name is Aud then have different xml format like AUD_FEATURE

					$this->short_name = $dat_val[$k][$j] . '_FEATURE';
					//$this->newvalue['attribute1']				=	'';	

					$this->_trace_changed_values(); // for xml processing

					//database saving
					if ($this->dbsave == 1) {
						$insert = array (
							'Feature' => array (
								'id' => $k . '-' . $dat_val[$k][$j],
								'stationkey_id' => $k,
								'short_name' => $dat_val[$k][$j],
								'created' => date('Y-m-d H:i:s'),
								'modified' => '0000-00-00 00:00:00',
								'status' => 1
							)
						);
						$this->_save2Db($insert);
					}

					if ($dat_txt[$k][$j]) {
						$this->short_name = $dat_val[$k][$j] . '_NUMBER';
						$this->newvalue['attribute1'] = $dat_txt[$k][$j];
						$this->_trace_changed_values(); // for xml processing	

						//database updation
						if ($this->dbsave == 1) {
							$update['Feature']['primary_value'] = $dat_txt[$k][$j];
							$update['Feature']['id'] = $k . '-' . $dat_val[$k][$j];
							$this->_update2Db($update, array (
								'id',
								'primary_value'
							));
						}
					}

				} else { //for blf

					if ($dat_txt[$k][$j]) {
						$this->short_name = $dat_val[$k][$j];
						$this->newvalue['attribute1'] = $dat_txt[$k][$j];
						$this->_trace_changed_values(); // for xml processing	

						//database saving
						if ($this->dbsave == 1) {
							$insert = array (
								'Feature' => array (
									'id' => $k . '-' . $dat_val[$k][$j],
									'stationkey_id' => $k,
									'short_name' => $dat_val[$k][$j],
									'created' => date('Y-m-d H:i:s'),
									'modified' => '0000-00-00 00:00:00',
									'status' => 1,
									'primary_value' => $dat_txt[$k][$j]
								)
							);
							$this->_save2Db($insert);
						}

					}
				}
				// sending label for both AUD and BLF
				if (isset ($dat_label[$k][$j]) && $dat_label[$k][$j]) {
					$this->action = 'update';

					if ($this->dbsave == 1)
						$this->newvalue['attribute1'] = $dat_label[$k][$j]; #CBM
					else
						$this->newvalue['attribute1'] = $dat_label[$k][$j];
					#$this->newvalue['attribute1']				=	utf8_decode($dat_label[$k][$j]);
					$this->newvalue['station_id'] = $this->station_id;

					$this->short_name = 'LABEL';
					$this->_trace_changed_values(); // for xml processing

					//database updation
					if ($this->dbsave == 1) {
						$update['Feature']['label'] = $dat_label[$k][$j];
						$update['Feature']['id'] = $k . '-' . $dat_val[$k][$j];
						$this->_update2Db($update, array (
							'id',
							'label'
						));
					}
				}

				/*******************************END**********************************************/

				//cheking whether this blf value can have moere than 8 blf values
				$key_num = explode('@', $k);
				if ($dat_val[$k][$j] == 'BLF') {

					$this->_validateBlfCount($dat_txt[$k][$j], $key_num);

				}
			}
			/*******************************************************end***********************************************/
			#CBM Code
			$j++;
		}

		/*************************all other changes with aud/blf updations ******************************************************/
		/*	getting the values from data (where these have already values that values may have modify /not)*/
		/*  $fet contains the values from the database*/

		if (isset ($_POST['dataLabel']))
			$secondary = $_POST['dataLabel'];
		else
			$secondary = array ();
		$this->secondary = $secondary;

		$this->key1 = 0;

		foreach ($this->data as $i => $val) {
			if (isset ($this->secondary[$i]) && $this->secondary[$i]) {
				if ($this->dbsave == 1)
					$this->secondary[$i] = $this->secondary[$i];
				else
					$this->secondary[$i] = utf8_decode($this->secondary[$i]);
				#$this->secondary[$i]		=	$this->secondary[$i];
			}

			if (isset ($fet[$i])) {
				/*******************************checking whether the value is modified***********************************/
				if ($this->data[$i] !== $fet[$i]['values'] || ((isset ($dat_sel[$i])) && $dat_sel[$i] != $fet[$i]['short_name']) || (isset ($this->secondary[$i])) && $this->secondary[$i] !== $fet[$i]['secondary']) {
					$blfValidateCheckExclude = 0; # Used to determine which features generate a BLF observer Check

					$this->upadte_occur = 1;
					$isem = 0;
					$del = 0;

					/**********************this is for just getting the changed short_name ie AUD/BLF (checked whether it is deleted or changed to another short_name or only changing the value of short name)**************************/
					if (strtoupper($fet[$i]['short_name']) == 'AUD' || strtoupper($fet[$i]['short_name']) == 'BLF') {
						//echo $fet[$i]['short_name'] ."!=".$dat_sel[$i];die();
						if ($fet[$i]['short_name'] != $dat_sel[$i]) {

							$del = 1;

							if ($fet[$i]['short_name'] == '')
								$old_shortname = 'NO FEATURE';
							else
								$old_shortname = $fet[$i]['short_name'];

							if ($dat_sel[$i] == '')
								$new_shortname = 'NO FEATURE';
							else
								$new_shortname = $dat_sel[$i];

							$log_shortname = $old_shortname . "->" . $new_shortname;
							#orig RE1 $short_name_sel = '<span style="color:orange;">' . $old_shortname . '</span> changed to <span style="color:red;">' . $new_shortname . '</span> and its';
							$short_name_sel = $old_shortname . 'changed to ' . $new_shortname . ' and its';
						} else {

							if ($dat_sel[$i] == '')
								$new_shortname = 'NO FEATURE';
							else
								$new_shortname = $dat_sel[$i];

							#orig RE1 $short_name_sel = '<span style="color:red;">' . $dat_sel[$i] . '</span>';
							$short_name_sel = $dat_sel[$i];
							$log_shortname = $new_shortname;

						}

						$this->short_name = $dat_sel[$i];
						$isem = 1;

					}
					/************************************END*************************************/
					else {
						$log_shortname = $fet[$i]['short_name'];
						# orig RE1 $short_name_sel = '<span style="color:red;">' . $fet[$i]['short_name'] . '</span>';
						$short_name_sel = $fet[$i]['short_name'];
						$this->short_name = $fet[$i]['short_name'];
					}

					/**********************function for xml request based on the change*********************/

					$this->station_id = $_POST['stationname'];
					$this->key = $fet[$i]['stationkey_id'];

					/************xml process for ncos calculation*****************/
					if ($this->key1 != $this->key && (strtolower($this->short_name) == 'lang' || strtolower($this->short_name) == 'barringset')) {
						$this->key1 = $this->key;
						$this->_ncoscalculation(); // for ncos calculation
						if ($this->dbsave == 1) {
							$this->_update2Db($this->ncos_baringupdate, array (
								'id',
								'primary_value'
							));
							$this->ncos_baringupdate = array ();

							$this->_update2Db($this->ncos_langupdate, array (
								'id',
								'primary_value'
							));
							$this->ncos_langupdate = array ();
						}

					}

					/************END*****************/

					if ((strtolower($this->short_name) == 'cfb') || (strtolower($this->short_name) == 'cfbstatus') || (strtolower($this->short_name) == 'cfu') || (strtolower($this->short_name) == 'cfustatus') || (strtolower($this->short_name) == 'cfk') || (strtolower($this->short_name) == 'cfkstatus') || (strtolower($this->short_name) == 'cfna') || (strtolower($this->short_name) == 'cfnastatus') || (strtolower($this->short_name) == 'cfdvt') || (strtolower($this->short_name) == 'displayname') || (strtolower($this->short_name) == 'aud') || (strtolower($this->short_name) == 'blf') || ($this->short_name == '')) {

						$this->short_name1 = $this->short_name;
						$this->newvalue = array ();

						/***********if feature(AUD/BLF) is empty****************/
						if ($isem && empty ($this->short_name1)) {

							$this->action = 'delete';
							if ($fet[$i]['short_name'] == 'AUD')
								$this->short_name = $fet[$i]['short_name'] . '_FEATURE';
							else
								$this->short_name = $fet[$i]['short_name'];

							$this->_trace_changed_values(); // xml request process

							//database deletion
							if ($this->dbsave == 1) {
								$delete = array (
									'Feature.id' => $i
								);
								$this->Feature->deleteAll($delete);
							}

							/*	if($fet[$i]['short_name']=='AUD'){	
									if((isset($fet[$i]['values'])) && $fet[$i]['values'] ){
											
											$this->action								=	'delete';
											$this->short_name							=	$fet[$i]['short_name'].'_NUMBER';
											$this->_trace_changed_values ();// xml request process
										}
								}*/

							if ((isset ($fet[$i]['secondary'])) && $fet[$i]['secondary']) {
								$this->newvalue['station_id'] = $this->station_id;
								$this->action = 'update';
								$this->newvalue['attribute1'] = "";
								$this->short_name = 'LABEL';
								$this->_trace_changed_values(); // xml request process
							}

						}
						/*******************END*********************************/
						/*******************if short name is changed eg:-changed from AUD to BLF***********************/
						elseif ($isem && $del && $this->short_name1) {

							if ($this->short_name1 == 'BLF') { // if changed from AUD to BLF

								$this->action = 'delete';
								$this->short_name = $fet[$i]['short_name'] . "_FEATURE";

								$this->_trace_changed_values(); // xml request process

								//database deletion
								if ($this->dbsave == 1) {

									$delete = array (
										'Feature.id' => $i
									);
									$this->Feature->deleteAll($delete);
								}

								/*if((isset($fet[$i]['values'])) && $fet[$i]['values'] ){
									
									$this->action								=	'delete';
									$this->short_name							=	$fet[$i]['short_name'].'_NUMBER';
									$this->_trace_changed_values ();// xml request process
								}*/

								/*if((isset($fet[$i]['secondary'])) && $fet[$i]['secondary'] ){
									$this->newvalue['station_id']				=	$this->station_id;
									$this->action								=	'update';
									$this->newvalue['attribute1']				=	$fet[$i]['secondary'];
									$this->short_name							=	'LABEL';
									$this->_trace_changed_values ();// xml request process
								}*/
							}
							if ($this->short_name1 == 'AUD') { // if changed from BLF to AUD

								$this->action = 'delete';
								$this->short_name = $fet[$i]['short_name'];
								$this->_trace_changed_values(); // xml request process

								//database deletion
								if ($this->dbsave == 1) {

									$delete = array (
										'Feature.id' => $i
									);
									$this->Feature->deleteAll($delete);
								}

								/*if((isset($fet[$i]['secondary'])) && $fet[$i]['secondary'] ){
										// xml request process
									$this->newvalue['station_id']			=	$this->station_id;
									$this->action							=	'update';
									$this->newvalue['attribute1']			=	$fet[$i]['secondary'];
									$this->short_name						=	'LABEL';
									$this->_trace_changed_values ();// xml request process
								}*/
							}
							$this->newvalue = array ();
							if ($this->short_name1 == 'AUD') { //if new value is AUD

								$this->action = 'add';
								$this->short_name = $this->short_name1 . '_FEATURE';
								$this->_trace_changed_values(); // xml request process

								//database insertion
								if ($this->dbsave == 1) {
									$insert = array (
										'Feature' => array (
											'id' => $this->key . '-' . $this->short_name1,
											'stationkey_id' => $this->key,
											'short_name' => $this->short_name1,
											'created' => date('Y-m-d H:i:s'),
											'modified' => '0000-00-00 00:00:00',
											'status' => 1
										)
									);
									$this->_save2Db($insert);
								}

								if ($this->data[$i]) {
									$this->newvalue['attribute1'] = $this->data[$i];
									$this->short_name = $this->short_name1 . '_NUMBER';
									$this->_trace_changed_values(); // xml request process

									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = $this->data[$i];
										$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));
									}

								}

							}
							if ($this->short_name1 == 'BLF') { //if new value is AUD

								$this->action = 'add';
								$this->newvalue['attribute1'] = $this->data[$i];
								$this->short_name = $this->short_name1;
								$this->_trace_changed_values(); // xml request process

								//database updation
								if ($this->dbsave == 1) {
									$insert = array (
										'Feature' => array (
											'id' => $this->key . '-' . $this->short_name1,
											'stationkey_id' => $this->key,
											'short_name' => $this->short_name1,
											'created' => date('Y-m-d H:i:s'),
											'modified' => '0000-00-00 00:00:00',
											'status' => 1,
											'primary_value' => $this->data[$i]
										)
									);
									$this->_save2Db($insert);
								}

							}

							if (isset ($this->secondary[$i]) && $this->secondary[$i]) {
								$this->newvalue['station_id'] = $this->station_id;
								$this->action = 'update';
								$this->newvalue['attribute1'] = $this->secondary[$i];
								$this->short_name = 'LABEL';
								$this->_trace_changed_values(); // xml request process

								//database updation
								if ($this->dbsave == 1) {
									$update['Feature']['label'] = $this->secondary[$i];
									$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
									$this->_update2Db($update, array (
										'id',
										'label'
									));
								}

							} else {
								if (isset ($fet[$i]['secondary']) && $fet[$i]['secondary']) {
									$this->newvalue['station_id'] = $this->station_id;
									$this->action = 'update';
									$this->newvalue['attribute1'] = '';
									$this->short_name = 'LABEL';
									$this->_trace_changed_values(); // xml request process
								}

							}
						}
						/**************************END****************************/
						elseif ($isem && $this->short_name1) { // only modified the primary_value & label of shortname

							$this->newvalue = array ();
							if ($this->short_name1 == 'AUD') {

								/*$this->action							=	'update';
								$this->short_name						=	$this->short_name1.'_FEATURE';
								$this->_trace_changed_values ();// xml request process*/

								if ((isset ($fet[$i]['values'])) && $fet[$i]['values'] == '' && $this->data[$i]) { // if primary_value is updated from empty to a nonempty value

									$this->action = 'add';
									$this->short_name = $this->short_name1 . '_NUMBER';
									$this->newvalue['attribute1'] = $this->data[$i];

									$this->_trace_changed_values(); // xml request process
									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = $this->data[$i];
										$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));
									}

								}
								elseif ((isset ($fet[$i]['values'])) && $fet[$i]['values'] && empty ($this->data[$i])) { // if primary_value is updated from empty to a nonempty value

									$this->action = 'delete';
									$this->short_name = $this->short_name1 . '_NUMBER';

									$this->_trace_changed_values(); // xml request process

									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = $this->data[$i];
										$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));
									}

								}
								#elseif((isset($fet[$i]['values'])) && $fet[$i]['values'] && $fet[$i]['values']!==$this->data[$i]){// if primary_value is updated value # CBM COmparison and leading 0
								elseif ((isset ($fet[$i]['values'])) && $fet[$i]['values'] && $fet[$i]['values'] !== $this->data[$i]) { // if primary_value is updated value

									$this->action = 'update';
									$this->short_name = $this->short_name1 . '_NUMBER';
									$this->newvalue['attribute1'] = $this->data[$i];
									$this->_trace_changed_values(); // xml request process

									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = $this->data[$i];
										$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));
									}
								}

							} else { // in the case of blf

								/*$this->action							=	'update';
								$this->short_name						=	$this->short_name1.'_FEATURE';
								$this->_trace_changed_values ();// xml request process*/

								if ((isset ($fet[$i]['values'])) && $fet[$i]['values'] == '' && $this->data[$i]) { // if primary_value is updated from empty to a nonempty value
									$blfValidateCheckExclude = 2; # Ensures BlfValidate Check

									$this->action = 'add';
									$this->short_name = $this->short_name1;
									$this->newvalue['attribute1'] = $this->data[$i];

									$this->_trace_changed_values(); // xml request process
									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = $this->data[$i];
										$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));
									}
								}
								elseif ((isset ($fet[$i]['values'])) && $fet[$i]['values'] && empty ($this->data[$i])) { // if primary_value is updated from empty to a nonempty value
									$blfValidateCheckExclude = 2; # Ensures BlfValidate Check

									$this->action = 'delete';
									$this->short_name = $this->short_name1;

									$this->_trace_changed_values(); // xml request process

									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = $this->data[$i];
										$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));
									}
								}
								elseif ((isset ($fet[$i]['values'])) && $fet[$i]['values'] && $fet[$i]['values'] != $this->data[$i]) { // if primary_value is updated value

									$blfValidateCheckExclude = 2; # Ensures BlfValidate Check

									$this->action = 'update';
									$this->short_name = $this->short_name1;
									$this->newvalue['attribute1'] = $this->data[$i];
									$this->_trace_changed_values(); // xml request process

									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = $this->data[$i];
										$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));
									}
								}

							}
							if (isset ($this->secondary[$i]) && $this->secondary[$i] !== $fet[$i]['secondary']) {

								if ($blfValidateCheckExclude != 2) { # If this is only a label update on its own, i.e not updates set already.
									$blfValidateCheckExclude = 1; # Stops BlfValidate Check
								}

								$this->newvalue['station_id'] = $this->station_id;
								$this->action = 'update';
								$this->newvalue['attribute1'] = $this->secondary[$i];

								$this->short_name = 'LABEL';

								$this->_trace_changed_values(); // xml request process

								//database updation
								if ($this->dbsave == 1) {

									$update['Feature']['label'] = $this->secondary[$i];
									$update['Feature']['id'] = $this->key . '-' . $this->short_name1;
									$this->_update2Db($update, array (
										'id',
										'label'
									));
								}
							}
						}
						elseif ((preg_match("/^(CFU)/", $fet[$i]['short_name'], $cf_matches)) || (preg_match("/^(CFK)/", $fet[$i]['short_name'], $cf_matches)) || (preg_match("/^(CFB)/", $fet[$i]['short_name'], $cf_matches)) || (preg_match("/^(CFNA)/", $fet[$i]['short_name'], $cf_matches))) {
							
							#Check that not run before.
							
							$cf_type = $cf_matches[1];
							if (!(preg_match("/(.*)Status/", $i, $matches))) {
								if (!empty ($this->data[$i])) {
									$this->newvalue['number'] = $this->data[$i];
								} else {
									$this->newvalue['number'] = '$';
								}
								$numberVar = $i;
								$statusVar = $i . 'Status';
								$this->newvalue['status'] = $this->data[$statusVar];

								$this->action = 'update';
								$this->short_name = strtolower($cf_type);
								
								$this->_trace_changed_values();
								
								#Delete a corresponding Status value to ensure XML is not sent twice/
								#unset ($this->data[$statusVar]);
								#unset ($this->data[$numberVar]);

							}
							elseif (preg_match("/(.*)Status/", $i, $matches)) {
								preg_match("/(.*)Status/", $i, $matches);
								if ($matches[0]) {

									$this->newvalue['status'] = $this->data[$i];
									$numberVar = $matches[1];
									$statusVar = $i;
									if (!empty ($this->data[$numberVar])) {
										$this->newvalue['number'] = $this->data[$numberVar];
									} else {
										$this->newvalue['number'] = '$';
									}

									$this->action = 'update';
									$this->short_name = strtolower($cf_type);
									
									$this->_trace_changed_values();
									
									#Delete a corresponding Status value to ensure XML is not sent twice/
									#unset ($this->data[$statusVar]);
									#unset ($this->data[$numberVar]);

								}
							}

							
							//database updation
							if ($this->dbsave == 1) {
									
								#Save number value
								$update['Feature']['primary_value'] = $this->data[$numberVar];
								$update['Feature']['id'] = $numberVar;
								$this->_update2Db($update, array (
									'id',
									'primary_value'
								));
								
								$this->log("STATION CONTROLLER : Saving to DB CFx Number Value =>" . "$numberVar" . "$this->data[$numberVar]", LOG_DEBUG);
								

								#Update The status value as well.
								$update['Feature']['primary_value'] = $this->data[$statusVar];
								$update['Feature']['id'] = $statusVar;
								$this->_update2Db($update, array (
									'id',
									'primary_value'
								));
								$this->log("STATION CONTROLLER : Saving to DB Cfx Status Value =>" . "$statusVar" . "$this->data[$statusVar]", LOG_DEBUG);
						
							}
							
							#Delete a corresponding Status value to ensure XML is not sent twice/
							unset ($this->data[$statusVar]);
							unset ($this->data[$numberVar]);
							
							$this->log("STATION CONTROLLER : Deleting values to ensure not sent twice =>" . "$numberVar" . "$this->data[$numberVar]", LOG_DEBUG);

						}
						elseif (preg_match("/^CFDVT/", $fet[$i]['short_name'])) {

							$this->newvalue['attribute1'] = $this->data[$i];

							if (isset ($_POST['stationport']) && $_POST['stationport']) {
								#Logic to determin ALNG and CICM to set the PRGRING VAR
								if (preg_match("/\bCICM\b/i", $_POST['stationport'])) {
									$this->newvalue['prgring'] = '';
								} else {
									$this->newvalue['prgring'] = 'PRGRING';

								}
							} else {
								#Logic to determin ALNG and CICM to set the PRGRING var.
								if (preg_match("/\bCICM\b/i", $this->stationPort)) {
									$this->newvalue['prgring'] = '';
								} else {
									$this->newvalue['prgring'] = 'PRGRING';
								}
							}

							$this->action = 'update';
							$this->short_name = 'cfdvt';

							$this->_trace_changed_values();

							//database updation
							if ($this->dbsave == 1) {
								$update['Feature']['primary_value'] = $this->data[$i];
								$update['Feature']['id'] = $i;
								$this->_update2Db($update, array (
									'id',
									'primary_value'
								));
								#$this->log("!!!!!!!!!!!UPDATING DB =>" . "$i" . "$this->data[$i]", LOG_DEBUG);

							}

						} else { // for all other form fields eg:- DisplayName
						
								$this->newvalue = array ();
								//To hanldlw when lower case value (but the same value is entered e.g sMALL SMALL)
								if (strtoupper($this->data[$i]) !== $fet[$i]['values'])
								{
								
									if ($fet[$i]['short_name'] == 'DISPLAYNAME') {
								

										#First look to see if there is a presejtation group defined for the customer.
										#IF so use that else revert to defaault logic.

										/**these for getting the current customer PG*/
										
										$stationPG = $this->Station->findById($this->station_id);
										if (isset ($stationPG['Customer']['presentation_group']))
										{
											$this->newvalue['cnn_id'] = $stationPG['Customer']['presentation_group'];
										
										}
										else
										{
											$this->newvalue['cnn_id'] = $this->customerID . 'PG';
										}
										
										$this->log("STATION CONTROLLER => PG IS" . $stationPG['Customer']['presentation_group'], LOG_DEBUG);
										/**end for getting the current customer PG*/
										if (!empty ($this->data[$i]))
											$this->newvalue['attribute1'] = strtoupper($this->data[$i]);
										else
											$this->newvalue['attribute1'] = '_';
									} 
									else 
									{
										$this->newvalue['attribute1'] = $this->data[$i];
									}

									$this->action = 'update';
									$this->short_name = $fet[$i]['short_name'];

									$this->_trace_changed_values();
	
									//database updation
									if ($this->dbsave == 1) {
										$update['Feature']['primary_value'] = strtoupper($this->data[$i]);
										$update['Feature']['id'] = $i;
										$this->_update2Db($update, array (
											'id',
											'primary_value'
										));

										//Workaround for RE2

                                                                                $DnsDisplay = $update['Feature']['primary_value'];
                                                                                $DispFeatureKey = $fet[$i]['stationkey_id'];
                                                                                //not using label
                                                                                $sql    =       "select primary_value from features where stationkey_id = \"$DispFeatureKey\" and short_name = 'DN';";
                                                                                $results = $this->Feature->query($sql);
                                                                                $DnsId = $results[0]['features']['primary_value'];
                                                                                //$results_array=print_r($results, true);
                                                                                //$this->log("1Station controller : results : $results_array", LOG_DEBUG);


                                                                                //using label
                                                                                //$DnsId = $fet[$i]['secondary'];
                                                                                $this->log("STATION CONTROLLER => DISPLAYNAME" . $DnsDisplay . ' AND ' . $DnsId , LOG_DEBUG);
                                                                                $sql    =       "update dns set display=\"$DnsDisplay\" where id = $DnsId;";
                                                                                $results = $this->Dns->query($sql);

                                                                                //End workaround RE2

									}

								}
								else
								{
									unset($this->upadte_occur);
								}
						}

						//for label in the aud/BLF
						/*if((isset($this->secondary[$i])) && $this->secondary[$i]!=$fet[$i]['secondary'] ){
							$this->newvalue									= 	array();
							$this->action									=	'update';
								
							$this->newvalue['attribute1']					=	$this->secondary[$i];
							$this->newvalue['station_id']					=	$this->station_id;
							
							$this->short_name								=	'LABEL';
							
							if($fet[$i]['short_name']!=$this->short_name){
								if(!empty($this->secondary[$i]))
									$this->_trace_changed_values ();
							}else{
									$this->_trace_changed_values ();
							}
								
						}*/
						/*************for keeping in the log table******************/
						$key_num = explode('@', $fet[$i]['stationkey_id']);

						if ($this->data[$i] != $fet[$i]['values'])
							$log_entry .= 'key ' . $key_num[0] . " " . $log_shortname . ":" . (($fet[$i]['values']) ? $fet[$i]['values'] : 'empy value') . "->" . (($this->data[$i]) ? $this->data[$i] : 'empty value') . ',';
						if ((isset ($this->secondary[$i])) && $this->secondary[$i] != $fet[$i]['secondary']) {
							$log_entry .= 'key ' . $key_num[0] . " " . $log_shortname . "_LABEL:" . (($fet[$i]['values']) ? $fet[$i]['values'] : 'empy value') . "->" . (($this->secondary[$i]) ? $this->secondary[$i] : 'empty value') . ',';
						}
						/*************for keeping in the log table******************/
					}

					$key_num = explode('@', $fet[$i]['stationkey_id']);

					//cheking whether this blf value can have moere than 8 blf values
					if (isset ($new_shortname) && trim($new_shortname) == 'BLF' && $blfValidateCheckExclude != 1) {

						$this->_validateBlfCount($this->data[$i], $key_num);
					}

				}
				/**************************END*************************/
			}
		}
		/*******************************END***************************************************/
		if ($this->dbsave == 1) {

			// xml sending if passord changed
			if ($_POST['password'] !== $stationinfo[0]['Station']['password'] && $stationinfo[0]['Station']['type'] != 'ANLG') {
				#if($_POST['password']!=$stationinfo[0]['Station']['password']  && $stationinfo[0]['Station']['type']!='ANLG'){ #CBM Changes for leading 0 problem.

				$this->action = 'update';

				$this->newvalue['attribute1'] = $_POST['password'];
				$this->key = 0;
				$this->short_name = 'password';
				$this->_trace_changed_values();

				//database updation
				if ($this->dbsave == 1) {
					$update['Station']['password'] = $_POST['password'];
					$update['Station']['id'] = $this->station_id;
					$field = array (
						'id',
						'password'
					);
					$this->Station->save($update, false, $field);
				}

			} //end
		} else {

			// to show in dialog box if passord changed 
			#if($_POST['password']!=$stationinfo[0]['Station']['password'] && $stationinfo[0]['Station']['type']!='ANLG' ){ #CBM Changes for leading 0 problem.
			if ($_POST['password'] !== $stationinfo[0]['Station']['password'] && $stationinfo[0]['Station']['type'] != 'ANLG') {
				$this->upadte_occur = 1;
				#orig RE1 $this->update[]		=' <span style="color:black;">'.__('key',true).' 0 </span> <span style="color:red">'.__('Password',true).'</span> '.__('value changed',true).' '.__('to',true). ' <b style="color:blue">'.$_POST['password'].'</b> </span><br>';
				$this->update[] = __('key', true) . ' 0 ' . __('Password', true) . ' ' . __('value changed', true) . ' ' . __('to', true) . ' ' . $_POST['password'];
			}
		}
	}

	/**
	 * function for handling xml requests & responses
	 *
	 */

	function _trace_changed_values() {

			if ($this->dbsave == 0) {
				$this->_errorValidate();

			} 
			else 
			{
				$this->_message_resp_xml();

				$response = $this->_read('res');
				//$acknowledge	= $this->_read('ack');
				$this->_keeplog($response);
				if ($response != 'empty' && $response['id'] && $response['status'] == 1) {

					if ($response['response'] != 'action_complete') {
						$this->success = 0;
						$_SESSION['error'] = __('Error from modification', true) . ' : ' . $response['response'];
						$this->redirect('/stations/edit/' . $this->station_id);
					}

				} else {
					$this->success = 0;
					$_SESSION['error'] = 'Error from modification ' . ($response['response']) ? $response['response'] : '';
					$this->redirect('/stations/edit/' . $this->station_id);
				}
			}
		
	}
	function _save2Db($insert) {

		$this->Feature->create();
		$this->Feature->save($insert);

	}
	function _update2Db($update, $field) {

		$this->Feature->save($update, false, $field);

	}
	function _errorValidate() {
		$key_num = explode('@', $this->key);
		$value = '';
		if (isset ($this->newvalue['attribute1']) && $this->newvalue['attribute1'])
			$value = $this->newvalue['attribute1'];
		elseif  (((isset ($this->newvalue['number']) && $this->newvalue['number'])) || 
				((isset ($this->newvalue['status']) && $this->newvalue['status'])))
			$value = $this->newvalue['number'] . __(" with status " . $this->newvalue['status'], true);
			#$value = $value . __($this->newvalue['status'], true);
			$this->update[] = __('key', true) . ' ' . $key_num[0] . ' ' . __(strtolower($this->short_name), true) . ' ' . __($this->action, true) . ' ' . __($value,true);
	}
	function _keeplog($response) {
		$key_num = explode('@', $this->key);
		$value = '';
		if (isset ($this->newvalue['attribute1']) && $this->newvalue['attribute1'])
			$value = $this->newvalue['attribute1'];

		if ($response == 'empty') {
			$response = array ();
			$response['status'] = 0;
			$response['response'] = 'Xml Server is not responding';

		}

		# orig RE1 $log = '<span style="color:black;"> Key ' . $key_num[0] . ' </span> <span style="color:red">' . strtolower($this->short_name) . ' </span><span style="color:blue;">' . $this->action . ' </span>  <span style="color:orange;">' . $value . '</span><br>';
		#WOrking 20121126 $log = __('key', true) . ' ' . $key_num[0] . ' ' . __(strtolower($this->short_name), true) . ' ' . __($this->action, true) . ' ' . __($value,true);;
		$log = 'Station Update : key' . ' ' . $key_num[0] . ' ' . strtolower($this->short_name) . ' ' . $this->action . ' ' . $value;
		
		$insert = array (
			'Log' => array (
				'affected_obj' => $this->station_id,
				'log_entry' => $log,
				'created' => date('Y-m-d H:i:s'),
				'status' => 1,
				'customer_id' => $this->customerID,
				'bsk' => $this->Session->read('BSK'),
				'user' => $this->Session->read('ACCOUNTNAME'),
				'app_type' => $this->Session->read('APPNAME'),
				'modified' => '0000-00-00 00:00:00',
				'modification_status' => $response['status'],
				'modification_response' => $response['response']
			)
		);

		$this->Log->create();
		$this->Log->save($insert, false);

	}

	/**
	 * function for the Ncos calculation
	 *
	 */
	function _ncoscalculation() {

		$bar_ncos = Configure :: read('NCOS-BARRINGSET');
		$lang_ncos = Configure :: read('NCOS-LANGUAGE');
		$lead_ncos = Configure :: read('NCOS-LEADING');
		$lang = '';
		$barset = '';
		$lead = '';

		$feat = $this->Feature->find('all', array (
			'conditions' => array (
				"Feature.stationkey_id" => $this->key
			)
		));

		foreach ($feat as $val) {

			$id = $val['Feature']['id'];
			if ($val['Feature']['short_name'] == 'LANG') {

				if ($this->dbsave == 0) {
					if (strtolower($this->data[$id]) != strtolower($val['Feature']['primary_value'])) {
						$this->action = 'update to';
						$this->short_name = 'LANG';
						$this->newvalue['attribute1'] = $this->data[$id];
						$this->_errorValidate();
					}

				} else {

					if ((isset ($this->data[$id])) && $this->data[$id]) {
						$lang = $lang_ncos[strtoupper($this->data[$id])];

						//database updation
						if ($this->dbsave == 1) {
							$update['Feature']['primary_value'] = $this->data[$id];
							$update['Feature']['id'] = $id;

							$this->ncos_langupdate = array ();
							$this->ncos_langupdate = $update;

							//$this->_update2Db($update,array('id','primary_value'));
						}

					} else {
						$lang = $lang_ncos[strtoupper($val['Feature']['primary_value'])];

						//database updation
						if ($this->dbsave == 1) {
							$update['Feature']['primary_value'] = $val['Feature']['primary_value'];
							$update['Feature']['id'] = $id;

							$this->ncos_langupdate = array ();
							$this->ncos_langupdate = $update;
							//$this->_update2Db($update,array('id','primary_value'));
						}
					}
				}

			}
			if ($val['Feature']['short_name'] == 'BARRINGSET') {

				if ($this->dbsave == 0) {
					if (strtolower($this->data[$id]) != strtolower($val['Feature']['primary_value'])) {
						$this->action = 'update to';
						$this->short_name = 'BARRINGSET';
						$this->newvalue['attribute1'] = $this->data[$id];
						$this->_errorValidate();
					}

				} else {

					if ((isset ($this->data[$id])) && $this->data[$id]) {
						$barset = $bar_ncos[$this->data[$id]];

						//database updation
						if ($this->dbsave == 1) {
							$update['Feature']['primary_value'] = $this->data[$id];
							$update['Feature']['id'] = $id;

							$this->ncos_baringupdate = array ();
							$this->ncos_baringupdate = $update;

							//$this->_update2Db($update,array('id','primary_value'));
						}

					} else {
						$barset = $bar_ncos[$val['Feature']['primary_value']];

						//database updation
						if ($this->dbsave == 1) {
							$update['Feature']['primary_value'] = $val['Feature']['primary_value'];
							$update['Feature']['id'] = $id;

							$this->ncos_baringupdate = array ();
							$this->ncos_baringupdate = $update;

							//$this->_update2Db($update,array('id','primary_value'));
						}
					}
				}
			}
			if ($val['Feature']['short_name'] == 'LEADINGZERO') {
				$lead = $lead_ncos[$val['Feature']['primary_value']];
			}
		}
		if ($lead == '') {
			$lead = $lead_ncos['0'];
		}

		$this->action = 'update';
		$this->short_name = 'NCOS';
		$this->newvalue['attribute1'] = $lang + $barset + $lead;
		if ($this->dbsave == 1) {
			#print_r($lang . ':' . $barset . ':' . $lead);die();
			$this->_trace_changed_values();
		}
	}

	/**
	 * function for viewing the log file
	 *
	 * @param int  $station_id
	 */

	function viewlog() {
		$this->pageTitle = 'Station Logs';
		$this->set('title_header', __('Swisscom Extranet Corporate Business - Voiphone Selfcare', true));
		$station_id = isset ($this->params['url']['station_id']) ? $this->params['url']['station_id'] : (isset ($this->params['named']['station_id']) ? $this->params['named']['station_id'] : "");
		if ($station_id != '') {
			$this->set('station_id', $station_id);
			$id = '';
			if ($this->Session->read('SELECTED_CUSTOMER') != Configure :: read('access_id')) {
				$location = $this->Station->find('all', array (
					'conditions' => array (
						"Station.status" => Configure :: read('status'),
						'Station.id' => $station_id
					)
				));
				$id = $this->Session->read('SELECTED_CUSTOMER');
				if ($location[0]['Location']['customer_id'] != $id) {
					$this->layout = 'ajax';
					$this->cakeError('accessDenied');
				}
			}

			$this->paginate['Paginate'] = $this->AutoPaginate->setPaginate();
			$cond = array (
				'Log.status' => '1',
				'Log.station_id' => $station_id
			);
			$user = isset ($this->params['url']['user']) ? $this->params['url']['user'] : (isset ($this->params['named']['user']) ? $this->params['named']['user'] : "");
			if ($user != '') {
				$cond = array_merge($cond, array (
					'Log.user LIKE' => '%' . $user . '%'
				));
			}
			$desc = isset ($this->params['url']['log_entry']) ? $this->params['url']['log_entry'] : (isset ($this->params['named']['log_entry']) ? $this->params['named']['log_entry'] : "");
			if ($desc != '') {
				$cond = array_merge($cond, array (
					'Log.log_entry LIKE' => '%' . $desc . '%'
				));
			}
			$status = isset ($this->params['url']['status']) ? $this->params['url']['status'] : (isset ($this->params['named']['status']) ? $this->params['named']['status'] : "");
			if ($status != '') {
				$cond = array_merge($cond, array (
					'Log.modification_status' => $status
				));
			}

			if ($id) {
				$this->paginate = array (
					'limit' => $this->paginate['limit'],
					'conditions' => $cond
				);
			} else {
				$this->paginate = array (
					'limit' => $this->paginate['limit'],
					'conditions' => $cond
				);
			}
			$station = $this->Station->findById($station_id);

			/**these for getting the current customer name*/
			if (isset ($station['Customer']['name']))
				$this->set('SELECTED_CUSTOMER_NAME', $station['Customer']['name']);
			/**end for getting the current customer name*/

			//pr($loginfo);
			//$this->paginate = $loginfo;
			$loginfo = $this->paginate('Log');
			$this->set('loginfo', $loginfo);
			$this->set('station', '');
			$this->set('customerid', $station['Station']['customer_id']);

			$customerInfo = $this->Customer->findById($station['Station']['customer_id']);
			if (isset ($customerInfo['Customer']['name'])) {
				$this->set('selected_customer', $customerInfo['Customer']['name']);
			} else {
				$this->set('selected_customer', 'UNDEF');

			}

		} else {

			//$this->redirect('/stations');
			$this->pageTitle = 'Logs';
			$this->set('title_header', __('Swisscom Extranet Corporate Business - Voiphone Selfcare', true));

			$this->set('station_id', $station_id);
			$id = '';
			if ($this->Session->read('SELECTED_CUSTOMER') != Configure :: read('access_id')) {
				$location = $this->Station->find('all', array (
					'conditions' => array (
						"Station.status" => Configure :: read('status'),
						'Station.id' => $station_id
					)
				));
				$id = $this->Session->read('SELECTED_CUSTOMER');
				if ($location[0]['Location']['customer_id'] != $id) {
					$this->layout = 'ajax';
					$this->cakeError('accessDenied');
				}
			}

			$this->paginate['Paginate'] = $this->AutoPaginate->setPaginate();

			if ($this->Session->read('APPNAME') != 'Phone') {
				$cond = array (
					'Log.status' => '1'
				);
			} else {
				$cond = array (
					'Log.status' => '1',
					'Log.type' => 'onDemand'
				);
			}
			$user = isset ($this->params['url']['user']) ? $this->params['url']['user'] : (isset ($this->params['named']['user']) ? $this->params['named']['user'] : "");
			if ($user != '') {
				$cond = array_merge($cond, array (
					'Log.user LIKE' => '%' . $user . '%'
				));
			}
			$desc = isset ($this->params['url']['log_entry']) ? $this->params['url']['log_entry'] : (isset ($this->params['named']['log_entry']) ? $this->params['named']['log_entry'] : "");
			if ($desc != '') {
				$cond = array_merge($cond, array (
					'Log.log_entry LIKE' => '%' . $desc . '%'
				));
			}
			$status = isset ($this->params['url']['status']) ? $this->params['url']['status'] : (isset ($this->params['named']['status']) ? $this->params['named']['status'] : "");
			if ($status != '') {
				$cond = array_merge($cond, array (
					'Log.modification_status' => $status
				));
			}

			if ($id) {
				$this->paginate = array (
					'limit' => $this->paginate['limit'],
					'conditions' => $cond
				);
			} else {
				$this->paginate = array (
					'limit' => $this->paginate['limit'],
					'conditions' => $cond
				);
			}
			$station = $this->Station->findById($station_id);

			/**these for getting the current customer name*/
			if (isset ($station['Customer']['name']))
				$this->set('SELECTED_CUSTOMER_NAME', $station['Customer']['name']);
			/**end for getting the current customer name*/

			//pr($loginfo);
			//$this->paginate = $loginfo;
			$loginfo = $this->paginate('Log');
			$this->set('loginfo', $loginfo);
			$this->set('station', '');
			$this->set('customerid', $station['Station']['customer_id']);

			$customerInfo = $this->Customer->findById($station['Station']['customer_id']);
			if (isset ($customerInfo['Customer']['name'])) {
				$this->set('selected_customer', $customerInfo['Customer']['name']);
			} else {
				$this->set('selected_customer', 'UNDEF');

			}
		}

	}
	/**
	 * function for getting the changed values from the log
	 *
	 * @param int $log_id
	 */
	function logdetails($log_id = null) {
		$log = $this->Log->findById($log_id);
		$loginfo = $log['Log'];

		$this->update = $log['Log'];
		$this->layout = 'ajax';

		$this->set('display', $this->update);

	}
	/**
	 * function for storing the changed values in the xml
	 *
	 */

	function _message_resp_xml() {
		$xml_string = '<?xml version="1.0" encoding="ISO-8859-1" ?>';
		$key_num = explode('@', $this->key);
		$xml_string .= '<object action="' . $this->action . '" name="' . strtolower($this->short_name) . '">';

		if (isset ($_POST['stationport']) && $_POST['stationport']) {
			#Logic to determin ALNG and CICM to leave ANLG Keys blank.
			if (preg_match("/\bCICM\b/i", $_POST['stationport'])) {
				$xml_string .= '<message station="' . $_POST['stationport'] . '" key="' . $key_num[0] . '">';
			} else {
				$xml_string .= '<message station="' . $_POST['stationport'] . '" key="">';

			}
		} else {
			#Logic to determin ALNG and CICM to leave ANLG Keys blank.
			if (preg_match("/\bCICM\b/i", $this->stationPort)) {
				$xml_string .= '<message station="' . $this->stationPort . '" key="' . $this->key . '">';
			} else {
				$xml_string .= '<message station="' . $this->stationPort . '" key="">';
			}
		}

		if ($this->short_name == 'LABEL') {

			// echo $this->newvalue['attribute1']	;die();	
		}
		foreach ($this->newvalue as $key => $val) {
			$xml_string .= '<var value="' . $val . '" name="' . $key . '"/>';
		}

		$xml_string .= '</message>';
		$xml_string .= '</object >';

		$path = Configure :: read('upload_url') . 'rough.xml';
		file_put_contents($path, $xml_string, FILE_APPEND);

		$path = Configure :: read('upload_url') . 'update.xml';
		file_put_contents($path, $xml_string); //  die();
		
		if(Configure :: read('activate_mode') != 'STUB')
		{
			#Send an XML message to the CALG
			$res = $this->Authentication->socket();
		}
		else
		{
			$record['id'] = '123456789';
			$record['response'] = 'RAN IN STUB MODE';
			$record['status'] = '1';
		}

		if ($res == 'not_respond') {
			$_SESSION['error'] = 'xml_not_respond';
			$this->redirect('/stations/edit/' . $this->station_id);
			exit ();
		}
	}

	/* start for xml read     */
	function _read($action) {

		$path = Configure :: read('upload_url') . $action . '.xml';

		$xml = @ simplexml_load_file($path);
		if (empty ($xml)) {
			return 'empty';
		}
		$res = $this->_xml2array($xml);

		if ($action == 'res') {
			$record['id'] = $res['children']['transaction']['attr']['id'];
			$record['response'] = $res['children']['transaction']['attr']['response'];
			$record['status'] = $res['children']['transaction']['attr']['status'];
			return $record;
		} else
			return $res['children']['transaction']['attr']['id'];
	}
	function _xml2array($xml) {

		$arXML = array ();
		$arXML['name'] = trim($xml->getName());
		$arXML['value'] = trim((string) $xml);
		$t = array ();
		foreach ($xml->attributes() as $name => $value)
			$t[$name] = trim($value);
		$arXML['attr'] = $t;
		$t = array ();
		foreach ($xml->children() as $name => $xmlchild)
			$t[$name] = $this->_xml2array($xmlchild);
		$arXML['children'] = $t;
		return ($arXML);
	}
	/*end of xml read*/

	function ajax_blf_list() {
		$name = $this->data;
		$this->layout = 'ajax';
		//$blf_list		=	 $this->Blf->find ('all',array('conditions'=>array('Blf.observed'=>$name)));;

		$blf_list = $this->Feature->getStationkeyId($name);

		$this->set('blf_list', $blf_list);

	}

	/**
	 * default action
	 *
	 */
	function index1($number = null) {

		if ($this->Session->read('SELECTED_CUSTOMER') != Configure :: read('access_id')) {

			$id = $this->Session->read('SELECTED_CUSTOMER');
			$cnt = count($this->_Filter);
			//$this->_Filter[$cnt]	=	"Location.customer_id = $id";
		}
		$this->paginate['Paginate'] = $this->AutoPaginate->setPaginate();
		$this->set('title_header', __('Swisscom Extranet Corporate Business - Voiphone Selfcare', true));

		$cnt = count($this->_Filter);

		// save the formats in a variable for the view
		$this->_Filter[$cnt] = "Station.customer_id = '$number'";
		$sel_location = 0;

		$sel_customer = $this->Session->read('sel_customer');
		if ($number != $sel_customer) {
			$this->Session->write('sel_customer', $number);

		} else {
			if (isset ($_POST['location']) && $_POST['location']) {

				$sel_location = $_POST['location'];
				$this->Session->write('sel_location', $sel_location);

			}
			elseif (isset ($_POST['location']) && $_POST['location'] == 0) {
				$this->Session->write('sel_location', '');
				$sel_location = '';
			}
			elseif ($this->Session->read('sel_location')) {
				$sel_location = $this->Session->read('sel_location');
			}
		}

		if ($sel_location) { // filter for location

			$count_val = $this->Station->station_count($number, $sel_location);
			$count = $count_val[0][0]['count'];

			$this->paginate = array (
				'joins' => array (
					array (
						'table' => 'stationkeys',
						'alias' => 'Stationkey',
						'type' => 'LEFT',
						'foreignKey' => false,
						'conditions' => array (
							'Station.id = Stationkey.Station_id'
						)
					)
				)
			);

			$cnt = count($this->_Filter);
			if ($sel_location == 'NULL')
				$this->_Filter[$cnt] = "Stationkey.location_id is NULL  group by Stationkey.station_id";
			else
				$this->_Filter[$cnt] = "Stationkey.location_id = '$sel_location'  group by Stationkey.station_id";

			$station_details = $this->paginate('Station', $this->_Filter);
			$this->params['paging']['Station']['count'] = $count;

		} else {

			$station_details = $this->paginate('Station', $this->_Filter);
		}

		$station_list = $this->Station->find('all', array (
			'conditions' => array (
				'Station.customer_id' => $number
			)
		));

		//for showing the location
		$station_list = $this->Station->find('all', array (
			'conditions' => array (
				'Station.customer_id' => $number
			)
		));
		$location = array ();
		foreach ($station_list as $details) {
			$location_details = $this->Stationkey->find('all', array (
				'conditions' => array (
					'Stationkey.station_id' => $details['Station']['id']
				)
			));

			foreach ($location_details as $loc) {
				if ($loc['Location']['id'])
					$location[$loc['Location']['id']] = $loc['Location']['zip'] . " , " . $loc['Location']['name'] . " ,  " . $loc['Location']['address'];
			}
		}

		$this->set('location', $location);
		$this->set('sel_location', $sel_location);

		$this->set('stations', $station_details);
		//$this->set('stations', $this->paginate('Station', $station_details)); 
		$this->set('cust_id', $number);
	}

	/**
	 * function for uploading file
	 *
	 */
	function upload() {
		#echo "<pre>";
		#print_r($_FILES["file"]);
		#die();

		/**************activity log*****************/

		#$log_string	= date('Y-m-d H:i:s') .' Activity :'.$_POST['customerID'].' || '.$this->Session->read('USERNAME').' | MoH File Upload ||'	;
		$log_string = $_POST['customerID'] . ' || ' . $this->Session->read('USERNAME') . ' | MoH File Upload ||';

		$this->log($log_string, 'activity');
		$log = 'MoH File Update : ';
		
		$insert = array (
			'Log' => array (
				'affected_obj' => '',
				'log_entry' => $log,
				'created' => date('Y-m-d H:i:s'),
				'status' => 1,
				'customer_id' => $_POST['customerID'] ,
				'bsk' => $this->Session->read('BSK'),
				'user' => $this->Session->read('ACCOUNTNAME'),
				'app_type' => $this->Session->read('APPNAME'),
				'modified' => '0000-00-00 00:00:00',
				'modification_status' => '1',
				'modification_response' => 'na'
			)
		);

		$this->Log->create();
		$this->Log->save($insert, false);

		/**************activity log*****************/

		$this->set('status', 0);
		if ($_FILES["file"]["error"] > 0) {
			//CBM $this->set('msg' ,'Error in upload');
			$this->set('msg', __('Error in upload', true));
		} else {
			#if($_FILES["file"]["type"]=='audio/x-wav'){// ALLOW ONLY WAV FILE
			if (($_FILES["file"]["type"] == 'audio/x-wav') || ($_FILES["file"]["type"] == 'audio/wav') || ($_FILES["file"]["type"] == 'audio/mpeg')) { // ALLOW ONLY WAV OR MP3 FILE
				#Check file does not exceed the maximum
				if ($_FILES["file"]["size"] < 10240000) {
					//Get Music on hold ID from DB	
					$mohId = $this->Customer->field('moh_id', array (
						'id =' => $_POST['customerID']
					));

					// call webserver
					//$result	=	$this->TransferMoh->uploadMoH($_FILES["file"]["tmp_name"],$this->Session->read('SELECTED_CUSTOMER'));

					move_uploaded_file($_FILES["file"]["tmp_name"], Configure :: read('upload_url') . str_replace(' ', '-', strtolower($_FILES["file"]["name"])));
					// call webserver
					//$result	=	$this->TransferMoh->uploadMoH(Configure::read('upload_url').$_FILES["file"]["name"],$this->Session->read('SELECTED_CUSTOMER'));
					$result = $this->TransferMoh->uploadMoH(Configure :: read('upload_url') . str_replace(' ', '-', strtolower($_FILES["file"]["name"])), $mohId);
					$this->set('status', 1);

					if ($result == 1) {
						$this->set('msg', __('File Transferred Successfully', true));
					} else {
						$this->set('msg', __($result, true));
					}
				} else {
					$this->set('msg', __('Maximum file size => 10M', true));
				}

			} else {
				#$this->set('msg' ,'only Wav file is allowed, you attempted to upload of file type : ' . $_FILES["file"]["type"]);
				#$this->set('msg' ,'FILE : ' . $_FILES["file"]["name"] . ','  . "__('only Wav file is allowed, you attempted to upload of file type') :" . ' . $_FILES["file"]["type"]);

				$this->set('msg', __('only .wav and .mp3 files are allowed', true));
			}

			#delete file after upload

			unlink(Configure :: read('upload_url') . str_replace(' ', '-', strtolower($_FILES["file"]["name"])));
		}

		$this->layout = 'ajax';
		$this->set('title_header', __('Swisscom Extranet Corporate Business - Voiphone Selfcare', true));
	}

	/**
	 * single user access for edit process
	 *
	 * @param int $station_id
	 */
	function _singleUserAccess($station_id) {

		return; # default behaviour is not to check single user access.

		$time_delete = time() - 600;
		$this->Userlog->deleteAll('Userlog.time <=' . $time_delete);

		$time = time() - 600;
		$condition = array (
			'conditions' => array (
				'Userlog.station_id' => $station_id,
				'Userlog.time >' => $time,
				'Userlog.user_id !=' => $this->Session->read('ACCOUNTID')
			)
		);

		$useStation = $this->Userlog->find('all', $condition);

		if (!empty ($useStation)) {
			if (isset ($this->confirm_change) && $this->confirm_change) {
				$this->userAccess = $useStation;
				return true;

			} else {
				#$this->Session->setFlash('Page in use by user : '.$useStation[0]['Userlog']['user_name'],'default', array('class' =>  'flash_class')); #CBM MOD 0212
				$this->Session->setFlash(__('Page in use by user : ', true) . $useStation[0]['Userlog']['user_name'], 'default', array (
					'class' => 'flash_class'
				));
				$this->redirect('/stations/index'); #CBM MOD
			}
		}
		$conditn = array (
			'Userlog.user_id' => $this->Session->read('ACCOUNTID')
		);
		$this->Userlog->deleteAll($conditn);
		$option['time'] = time();
		$option['station_id'] = $station_id;
		$option['user_id'] = $this->Session->read('ACCOUNTID');
		$option['user_name'] = $this->Session->read('USERNAME') . ' ' . $this->Session->read('USERFIRSTNAME');
		$this->Userlog->save($option);

	}
	/**
	 * function for checking the blf can have more than 8 blf values
	 *
	 * @param unknown_type $primary_key
	 */
	function _validateBlfCount($primary_key = '', $key = '') {
		if ($primary_key) {

			if (in_array($primary_key, $this->blfPrimKey)) {
				$this->blfDetail[$primary_key]['count'] = $this->blfDetail[$primary_key]['count'] + 1;

				$this->blfDetail[$primary_key]['key'] = $this->blfDetail[$primary_key]['key'] . ' , key' . $key[0];

				if ($this->blfDetail[$primary_key]['tot_count'] + $this->blfDetail[$primary_key]['count'] > 8) {
					if (isset ($this->blfDetail[$primary_key]['validateKeyCount'])) {
						$this->validateErrors[$this->blfDetail[$primary_key]['validateKeyCount']] = '<span style="color:green;font-size:1.1em"> Key' . $this->blfDetail[$primary_key]['key'] . ' </span> <span style="color:red;font-size:1.1em">' . $primary_key . ' produce more 8 BLF Values </span>';
					} else {
						$this->validateErrors[] = '<span style="color:green;font-size:1.1em"> Key' . $this->blfDetail[$primary_key]['key'] . ' </span> <span style="color:red;font-size:1.1em">' . $primary_key . ' produce more 8 BLF Values </span>';
						$this->blfDetail[$primary_key]['validateKeyCount'] = count($this->validateErrors) - 1;
					}
				}

			} else {
				$count_blf = $this->Feature->getStationkeyIdCount($primary_key);

				if ($count_blf[0][0]['count'] >= 8) {

					#$this->validateErrors[]	=	'<span style="color:green;font-size:1.1em"> Key'.$key[0].' </span> <span style="color:red;font-size:1.1em">'.$primary_key.' have 8 BLF Values </span>';
					$this->validateErrors[] = '<span style="color:green;font-size:1.1em"> Key' . $key[0] . ' </span> <span style="color:red;font-size:1.1em">' . $primary_key . ' ' . __("Limit of observers exceeded", true) . ' </span>';
				} else {

					$this->blfPrimKey[] = $primary_key;
					$this->blfDetail[$primary_key]['key'] = $key[0];
					$this->blfDetail[$primary_key]['count'] = 1;
					$this->blfDetail[$primary_key]['tot_count'] = $count_blf[0][0]['count'];
				}

			}

		}
	}
	function upload_xml($station_id = null) {

		$stationinfo = $this->Stationkey->find('all', array (
			'conditions' => array (
				"Stationkey.status" => Configure :: read('status'),
				'Stationkey.station_id' => $station_id
			)
		));

		$this->customerID = $stationinfo[0]['Station']['customer_id'];

		$this->station_id = $station_id;

		$this->action = 'query';
		$this->short_name = 'cacheRefresh';

		$this->newvalue['cnn_id'] = $this->customerID;
		$this->newvalue['station_id'] = $station_id;
		$this->stationPort = $stationinfo[0]['Station']['port'];
		$this->key = 3;

		$this->_message_resp_xml();

		$response = $this->_read('res');

		if ($response != 'empty' && $response['id'] && $response['status'] == 1) {

			if ($response['response'] != 'action_complete') {
				$this->success = 0;
				$_SESSION['error'] = 'Error from modification : ' . $response['response'];
				$this->redirect('/stations/edit/' . $this->station_id);
			} else {

				$_SESSION['success'] = 'Operation Successful';
				$this->redirect('/stations/edit/' . $this->station_id);
			}

		} else {
			$this->success = 0;
			$_SESSION['error'] = 'Error from modification ' . ($response['response']) ? $response['response'] : '';
			$this->redirect('/stations/edit/' . $this->station_id);

		}

	}

	//function for export station data in csv format.
	function export() {

		$this->layout = "";
		$conds = unserialize($this->Session->read('cond'));
		$filename = "export_station_" . date("Y.m.d") . ".csv";
		$csv_file = fopen('php://output', 'w');
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="' . $filename . '"');

		$results = $this->Station->find('all', array (
			'joins' => array (
				array (
					'table' => 'stationkeys',
					'alias' => 'Stationkey',
					'type' => 'INNER',
					'foreignKey' => false,
					'conditions' => array (
						'Station.id = Stationkey.Station_id'
					)
				),
				array (
					'table' => 'features',
					'alias' => 'Feature',
					'type' => 'INNER',
					'foreignKey' => false,
					'conditions' => array (
						'Feature.stationkey_id = Stationkey.id'
					)
				)
			),
			'conditions' => $conds,
			'fields' => array (
				'Station.id',
				'Feature.primary_value',
				'Station.extensions',
				'Station.type',
				'Station.port'
			),
			'recursive' => -1,
			'order' => 'Station.created DESC'
		));

		$header_row = array (
			__("S.No.", true),
			__("Number", true),
			__("DISPLAYNAME", true),
			__("Exp", true),
			__("Type", true),
			__("Port", true)
		);
		fputcsv($csv_file, $header_row, ';', '"');

		// Each iteration of this while loop will be a row in your .csv file where each field corresponds to the heading of the column
		$i = 1;
		foreach ($results as $result) {
			// Array indexes correspond to the field names in your db table(s)
			$row = array (
				$result['Customer']['Sno'] = $i,
				$result['Station']['id'],
				$result['Feature']['primary_value'],
				$result['Station']['extensions'],
				$result['Station']['type'],
				$result['Station']['port']
			);
			$i++;
			fputcsv($csv_file, $row, ';', '"');
		}

		fclose($csv_file);
		exit ();
	}
	
	// new function
	function  major_cfeature_change($station_id = null){
		 #$stationInfo = $this->Station->findById($station_id);
		 $stationInfo = $this->Stationkey->find('first', array (
                                'conditions' => array (
                                        'Station.id' => $station_id
                                )
				, 'fields' => array (
                                        'Station.status',
				)
                        ));

		 $statArray = print_r($stationInfo, true);
		#$output_array=print_r($output, true);
		$this->log('editFeature page ' . 'station Info ' . $statArray, LOG_DEBUG);
		
		//First Create an as-is version.
		if(($station_id != '') && ($stationInfo['Station']['status'] != 5))
		{

			
			$createAsis = $this->Station->createAsisStation($station_id);
			$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
			$createAsis = $this->Station->createAsisStationKeys($station_id);
			$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
			$createAsis = $this->Station->deleteAsisFeatures($station_id);
			$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
			$createAsis = $this->Station->createAsisFeatures($station_id);
			$this->log('editFeature page ' . 'Attempting top create asis ' . $createAsis, LOG_DEBUG);
		}
		
		
		if($this->RequestHandler->isAjax()==true){ 
			//echo "<pre>"; print_r($this->params); die;
			$featureNameArray = $this->params['form']['featurename'];
			$featureValuesArray = $this->params['form']['featurevalue'];
			$newPositionArray = $this->params['form']['featureNewPosition'];
			$newAddedFeature = explode(",",trim($this->params['form']['newaddedFeatues'],","));  
			//echo "<pre>"; print_r($featureValuesArray); die;
			$featureFinalArray = array();
			foreach($newPositionArray as $key=>$val){
				
				if(isset($featureNameArray[$key]) && !empty($featureNameArray[$key])){
					$featureFinalArray[$val]['featureName'] = $featureNameArray[$key];
					$featureFinalArray[$val]['featureValue'] =  $featureValuesArray[$key];
					
					if(in_array($featureValuesArray[$key], $newAddedFeature)){
						$featureFinalArray[$val]['originalposition'] = "";
						$featureFinalArray[$val]['status'] = "99";
					}else{
						$featureFinalArray[$val]['originalposition'] = $key;
						$featureFinalArray[$val]['status'] = "1";
					} 
					if($featureFinalArray[$val]['originalposition'] != $newPositionArray[$key])
					{
						$featureFinalArray[$val]['status'] = 99;
					}
					$featureStationKeyId = $newPositionArray[$key] . '@' . $station_id;
					$featureFeatureId = $key . '@' .$station_id . '-' . $featureFinalArray[$val]['featureName'];
					$insert = array (
							'Feature' => array (
									'id' => $featureFeatureId,
									'stationkey_id' => $featureStationKeyId,
									'short_name' => $featureFinalArray[$val]['featureName'],
									'primary_value' => $featureFinalArray[$val]['featureValue'],
									'created' => date('Y-m-d H:i:s'),
									'modified' => '0000-00-00 00:00:00',
									'status' => $featureFinalArray[$val]['status']
							)
					);
					$this->_save2Db($insert);
				}
				

			} 	echo "<pre>"; print_r($featureFinalArray);
		}
		 #station status update
                $update['Station']['status'] = '5';
                $update['Station']['id'] = $station_id ;
		 $this->Station->save($update, false,  array('id','status'));

		#exec($path = Configure :: read('base_url') . )create2BFull.plu
		#$execPath = '/usr/bin/perl /var/www/html/voipphoneRE3/XSLTWork/POC2/2BExtractor_v1.pl ' . $station_id . ' 2>&1';
		#$execPath = '/var/www/html/voipphoneRE3/XSLTWork/POC2/2BExtractor_v1.pl ' . $station_id . ' 2>&1';
		#$execPath = '/root/localperl/bin/perl -v 2>&1';
		#$output = system($execPath, $retval);
		#$output_array=print_r($output, true);
		$this->log('editFeature page : CAlling perl script ' . $execPath . 'output' .  $output . ' retval ' . $retval, LOG_DEBUG);
	}
}
?>
